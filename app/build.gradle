plugins {
    id 'com.android.application'
}

apply(plugin: 'jacoco')

def applicationName = "parasoft-demo-app-mobile"

def buildMetadata = ''
if (project.hasProperty("jenkinsBuildNumber")) {
    buildMetadata += new Date().format('yyyyMMdd') + 'B' + jenkinsBuildNumber
} else {
    buildMetadata += new Date().format('yyyyMMddHHmmss')
}
if (project.hasProperty("gitCommitHash")) {
    buildMetadata += '.' + gitCommitHash
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.parasoft.demoapp"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "buildMetadata", "\"${buildMetadata}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true

            // To modify the name of build apk file
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${applicationName}-" + android.defaultConfig.versionName + ".apk"
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            res.srcDirs = [
                    // Add layout files path
                    'src/main/res/layouts/homeActivity',
                    'src/main/res/layouts/loginActivity',
                    'src/main/res/layouts/common',
                    'src/main/res/'
            ]
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        animationsDisabled true

        unitTests {
            returnDefaultValues true
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    debugImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'org.mockito:mockito-android:4.8.0'
}

def fileFilter = ['**/BuildConfig.*']
def mainSrc = "${project.projectDir}/src/main/java"
def debugTree =
        fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
def debugUnitTestData =
        fileTree(dir: "${buildDir}/outputs/unit_test_code_coverage/debugUnitTest",
                includes: ['**/*.exec'])
def debugAndroidTestData =
        fileTree(dir: "${buildDir}/outputs/code_coverage/debugAndroidTest", includes: ['**/*.ec'])

tasks.register('mergeUnitTestAndAndroidTestReports', JacocoReport) {
    group = "report"
    description = "Run Android tests and Unit tests and merge the coverage of these two kinds of tests into one report."

    dependsOn "createDebugUnitTestCoverageReport", "createDebugAndroidTestCoverageReport"

    reports {
        html.required = true
        xml.required = true
    }

    doLast {
        println("Html report is generated: ${buildDir}/reports/jacoco/mergeUnitTestAndAndroidTestReports/html/index.html")
        println("Xml report is generated: ${buildDir}/reports/jacoco/mergeUnitTestAndAndroidTestReports/mergeUnitTestAndAndroidTestReports.xml")
    }

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = [debugUnitTestData, debugAndroidTestData]
}

def testTypeDataMap = [
        debugUnitTest: [debugUnitTestData],
        debugAndroidTest: [debugAndroidTestData],
        combinedDebug: [debugUnitTestData, debugAndroidTestData]
]
def coverageReportTasks = new LinkedHashMap<String, String>()
testTypeDataMap.each {entry ->
    def testType = entry.key
    def testData = entry.value
    def reportTaskName = "createCustom${testType.capitalize()}CoverageReport"
    coverageReportTasks[testType] = reportTaskName
    def reportDir = "reports/coverage/${testType}"
    tasks.register(reportTaskName, JacocoReport) {
        reports {
            html {
                required = true
                outputLocation = layout.buildDirectory.dir("${reportDir}/html")
            }
            xml {
                required = true
                outputLocation = layout.buildDirectory.file("${reportDir}/jacoco.xml")
            }
        }

        sourceDirectories.from = files([mainSrc])
        classDirectories.from = files([debugTree])
        executionData.from = testData

        doLast {
            println "${testType} JaCoCo coverage report is generated in: ${buildDir}/${reportDir}"
        }
    }
}

project.afterEvaluate {
    tasks.named("testDebugUnitTest") {
        finalizedBy coverageReportTasks['debugUnitTest'], coverageReportTasks['combinedDebug']
    }
    tasks.named("connectedDebugAndroidTest") {
        finalizedBy coverageReportTasks['debugAndroidTest'], coverageReportTasks['combinedDebug']
    }
}
